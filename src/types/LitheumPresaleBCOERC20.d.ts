/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LitheumPresaleBCOERC20Interface extends Interface {
  functions: {
    LitheumERC20TokenAddress: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    MULTIPLIER: TypedFunctionDescription<{ encode([]: []): string }>;

    RESERVE_AMOUNT: TypedFunctionDescription<{ encode([]: []): string }>;

    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    burn: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    getBLTHBalance: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentPrice: TypedFunctionDescription<{ encode([]: []): string }>;

    getEstimatedSwapAmount: TypedFunctionDescription<{
      encode([usdtAmount]: [BigNumberish]): string;
    }>;

    getUSDTBalance: TypedFunctionDescription<{ encode([]: []): string }>;

    isConvertible: TypedFunctionDescription<{ encode([]: []): string }>;

    isOwner: TypedFunctionDescription<{ encode([]: []): string }>;

    launchSAFT: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    reverseSwap: TypedFunctionDescription<{
      encode([blthAmount, usdtAmount, slippage]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    setLitheumERC20TokenAddress: TypedFunctionDescription<{
      encode([LitheumERC20TokenAddress_]: [string]): string;
    }>;

    swap: TypedFunctionDescription<{
      encode([usdtAmount, blthAmount, slippage]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([sender_, recipient_, amount_]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    usdtContract: TypedFunctionDescription<{ encode([]: []): string }>;

    withdraw: TypedFunctionDescription<{
      encode([usdtAmount]: [BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class LitheumPresaleBCOERC20 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LitheumPresaleBCOERC20;
  attach(addressOrName: string): LitheumPresaleBCOERC20;
  deployed(): Promise<LitheumPresaleBCOERC20>;

  on(event: EventFilter | string, listener: Listener): LitheumPresaleBCOERC20;
  once(event: EventFilter | string, listener: Listener): LitheumPresaleBCOERC20;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LitheumPresaleBCOERC20;
  removeAllListeners(eventName: EventFilter | string): LitheumPresaleBCOERC20;
  removeListener(eventName: any, listener: Listener): LitheumPresaleBCOERC20;

  interface: LitheumPresaleBCOERC20Interface;

  functions: {
    LitheumERC20TokenAddress(): Promise<string>;

    MULTIPLIER(): Promise<BigNumber>;

    RESERVE_AMOUNT(): Promise<BigNumber>;

    allowance(owner: string, spender: string): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string): Promise<BigNumber>;

    burn(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decimals(): Promise<number>;

    getBLTHBalance(): Promise<BigNumber>;

    getCurrentPrice(): Promise<BigNumber>;

    getEstimatedSwapAmount(usdtAmount: BigNumberish): Promise<BigNumber>;

    getUSDTBalance(): Promise<BigNumber>;

    isConvertible(): Promise<boolean>;

    isOwner(): Promise<boolean>;

    launchSAFT(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    name(): Promise<string>;

    reverseSwap(
      blthAmount: BigNumberish,
      usdtAmount: BigNumberish,
      slippage: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setLitheumERC20TokenAddress(
      LitheumERC20TokenAddress_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    swap(
      usdtAmount: BigNumberish,
      blthAmount: BigNumberish,
      slippage: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    symbol(): Promise<string>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender_: string,
      recipient_: string,
      amount_: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    usdtContract(): Promise<string>;

    withdraw(
      usdtAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  LitheumERC20TokenAddress(): Promise<string>;

  MULTIPLIER(): Promise<BigNumber>;

  RESERVE_AMOUNT(): Promise<BigNumber>;

  allowance(owner: string, spender: string): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string): Promise<BigNumber>;

  burn(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decimals(): Promise<number>;

  getBLTHBalance(): Promise<BigNumber>;

  getCurrentPrice(): Promise<BigNumber>;

  getEstimatedSwapAmount(usdtAmount: BigNumberish): Promise<BigNumber>;

  getUSDTBalance(): Promise<BigNumber>;

  isConvertible(): Promise<boolean>;

  isOwner(): Promise<boolean>;

  launchSAFT(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  name(): Promise<string>;

  reverseSwap(
    blthAmount: BigNumberish,
    usdtAmount: BigNumberish,
    slippage: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setLitheumERC20TokenAddress(
    LitheumERC20TokenAddress_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  swap(
    usdtAmount: BigNumberish,
    blthAmount: BigNumberish,
    slippage: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  symbol(): Promise<string>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender_: string,
    recipient_: string,
    amount_: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  usdtContract(): Promise<string>;

  withdraw(
    usdtAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    LitheumERC20TokenAddress(): Promise<BigNumber>;

    MULTIPLIER(): Promise<BigNumber>;

    RESERVE_AMOUNT(): Promise<BigNumber>;

    allowance(owner: string, spender: string): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    balanceOf(account: string): Promise<BigNumber>;

    burn(amount: BigNumberish): Promise<BigNumber>;

    decimals(): Promise<BigNumber>;

    getBLTHBalance(): Promise<BigNumber>;

    getCurrentPrice(): Promise<BigNumber>;

    getEstimatedSwapAmount(usdtAmount: BigNumberish): Promise<BigNumber>;

    getUSDTBalance(): Promise<BigNumber>;

    isConvertible(): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    launchSAFT(): Promise<BigNumber>;

    name(): Promise<BigNumber>;

    reverseSwap(
      blthAmount: BigNumberish,
      usdtAmount: BigNumberish,
      slippage: BigNumberish
    ): Promise<BigNumber>;

    setLitheumERC20TokenAddress(
      LitheumERC20TokenAddress_: string
    ): Promise<BigNumber>;

    swap(
      usdtAmount: BigNumberish,
      blthAmount: BigNumberish,
      slippage: BigNumberish
    ): Promise<BigNumber>;

    symbol(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;

    transferFrom(
      sender_: string,
      recipient_: string,
      amount_: BigNumberish
    ): Promise<BigNumber>;

    usdtContract(): Promise<BigNumber>;

    withdraw(usdtAmount: BigNumberish): Promise<BigNumber>;
  };
}
